INPUT FILE VALIDATION
---------------------
- First line must be a single string representing root node.

- Subsequent lines must contain at least 2 strings:
    - Node name, Parent node name
- Can be no more than 10 strings in length:
    - 2 for: name, Parent
    - 8 for: power categories


MAIN VALIDATION STATES
----------------------
- Validate first line for root node
    - Single string
        - doesn't contain "="

- Two strings
    - doesn't contain "="
    - Parent exists in network
    - Name, Parent aren't the same

- More than two strings
    - First two strings satisfy TWO STRING validations
        - SPECIAL CASE: Valid if name, parent both == root name
    - Subsequent strings 
        - Create sub array
            - Validate each element contains "="
            - Switch statement using decorations
                - Catch number format exceptions, throw new Custom Exception

- More than 10 strings


IDENTIFY TREE DEPTH
-------------------
Count steps back to when node.parent == root.

nodeDepth = checkDepth(node.parent)

int checkDepth(parent)
    depth = 1
    
    if(parent != root)
        depth++
        parentNode = getNode(parent)
        checkDepth(parentNode.parent)
    
    return depth;

addNode(node, nodeDepth)

EXAMPLE: north, city

nodeDepth = checkDepth(node.parent)

int checkDepth(city)
    depth = 1

    if(city != root) //IT DOES

    return depth

addNode(node, 1)

EXAMPLE: south, city

nodeDepth = checkDepth(node.parent)

int checkDepth(city)
    depth = 1

    if(city != root) //IT DOES

    return depth

addNode(node, 1)

EXAMPLE: B1, north

nodeDepth = checkDepth(node.parent)

int checkDepth(north)
    depth = 1

    if(north != root)
        depth++
        parentNode = getNode(north)
        checkDepth(parentNode.parent)
    
    return depth;

addNode(node, 2)
        

